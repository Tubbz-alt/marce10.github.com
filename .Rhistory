# Compare custom.contour to X
if(!is.null(custom.contour)){
#check if sound.files and selec columns are present and in the right order
if(!identical(names(custom.contour)[1:2], c("sound.files", "selec"))) stop("'sound.files' and/or 'selec' columns are not found in custom.contour")
#check if the info in sound.files and selec columns is the same for X and custom.contour
#remove custom.contour selections not in X
custom.contour <- custom.contour[paste(custom.contour[,c("sound.files")], custom.contour[,c("selec")]) %in% paste(X[,c("sound.files")], X[,c("selec")])]
#stop if not the same number of selections
if(nrow(X) > nrow(custom.contour)) stop("selection(s) in X but not in custom.contour")
#order custom.contour as in X
custom.contour <- custom.contour[match(paste(custom.contour[,c("sound.files")], custom.contour[,c("selec")]), paste(X[,c("sound.files")], X[,c("selec")])),]
# frange.detec <- FALSE
}
# adjust if only 1 pch was specfified
if(length(pch) == 1) pch <- c(pch, pch)
# adjust if only 1 color was specified
if(length(col) == 1) col <- c(col, col)
# adjust if only 1 leglab was specified
if(length(leglab) == 1) leglab <- c(leglab, leglab)
#make colors transparent
col <- adjustcolor(c(col, "yellow", "black", "white", "red"), alpha.f = col.alpha)
r <- tuneR::readWave(as.character(X$sound.files[i]), header = TRUE)
f <- r$sample.rate
t <- c(X$start[i] - mar, X$end[i] + mar)
mar1 <- mar
if(t[1] < 0) {
t[1] <- 0
mar1 <- X$start[i]
}
mar2 <- mar1 + X$end[i] - X$start[i]
if(t[2] > r$samples/f) t[2] <- r$samples/f
r <- tuneR::readWave(as.character(X$sound.files[i]), from = t[1], to = t[2], units = "seconds")
if(bp[1] == "frange") bp <- c(X$low.freq[i], X$high.freq[i])
b <- bp
if(b[2] > ceiling(r@samp.rate/2000) - 1) b[2] <- ceiling(r@samp.rate/2000) - 1
fl<- flim #in case flim its higher than can be due to sampling rate
if(fl[2] > ceiling(f/2000) - 1) fl[2] <- ceiling(f/2000) - 1
if(propwidth)
pwc <- (10.16) * ((t[2]-t[1])/0.27) * xl * picsize else pwc <- (10.16) * xl * picsize
if(osci == TRUE) hts <- c(3, 2) else hts <- NULL
if(sc == TRUE) wts <- c(3, 1) else wts <- NULL
par(mar = inner.mar)
par(oma = outer.mar)
if(!all(is.na(frng$frange))) b <- as.numeric(frng$frange)
dfreq1 <- seewave::dfreq(r, f = f, wl = wl, ovlp = 70, plot = FALSE, bandpass = b * 1000, fftw = TRUE,
threshold = threshold.time, tlim = c(mar1, mar2))
dfreq <- matrix(dfreq1[!is.na(dfreq1[,2]),], ncol = 2)
if(nrow(dfreq > 2) & !is.null(freq.continuity))
{
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]):nrow(dfreq)] <- FALSE
dfreq <- dfreq[indx, ]
}
points(c(dfreq[c(which.max(dfreq[,2]),which.min(dfreq[,2])),1])+mar1, c(dfreq[c(which.max(dfreq[,2]),
which.min(dfreq[,2])),2]), col = col[3], cex = cex[1] * 1.6, pch = pch[2], lwd = 2)
dfreq
dfreq <- as.matrix(dfreq, ncol = 2)
dfreq
dfreq <- as.matrix(dfreq, nrow = 2)
dfreq
dfreq1 <- seewave::dfreq(r, f = f, wl = wl, ovlp = 70, plot = FALSE, bandpass = b * 1000, fftw = TRUE,
threshold = threshold.time, tlim = c(mar1, mar2))
dfreq <- matrix(dfreq1[!is.na(dfreq1[,2]),], ncol = 2)
dfreq
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
indx
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
indx
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]):nrow(dfreq)] <- FALSE
indx
any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])
indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
indx
which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[(nrow(dfreq) - which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])):nrow(dfreq)] <- FALSE
indx
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[(1- nrow(dfreq) - which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])):nrow(dfreq)] <- FALSE
(nrow(dfreq) - which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]))
nrow(dfreq)
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
indx
indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]
indx[nrow(dfreq):1]
source('~/Dropbox/warbleR/R/trackfreqs.R')
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
i = 16
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.1)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.3)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.4)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.5)
source('~/Dropbox/warbleR/R/trackfreqs.R')
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.5, clip.edges = 5)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.5, clip.edges = 10)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2, clip.edges = 10)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2, clip.edges = 10, type = "l")
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 15, line = F, freq.continuity = 0.2, clip.edges = 10, type = "l")
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 15, line = F, freq.continuity = 0.2, clip.edges = 2, type = "l")
if(!"devtools" %in% installed.packages()[,"Package"])  install.packages(y)
require(y, character.only = T)
devtools::install_github("maRce10/warbleR")
if(!"devtools" %in% installed.packages()[,"Package"])  install.packages("devtools")
require("devtools")
devtools::install_github("maRce10/warbleR")
require("warbleR")
setwd(tempdir())
data(list = c("Phae.long1", "Phae.long2", "Phae.long3",
"Phae.long4", "selec.table"))
writeWave(Phae.long1,"Phae.long1.wav")
writeWave(Phae.long2,"Phae.long2.wav")
writeWave(Phae.long3,"Phae.long3.wav")
writeWave(Phae.long4,"Phae.long4.wav")
getwd()
list.files(pattern = "\\.wav$", ignore.case = TRUE)
head(selec.table)
#lets use X for the selection table data frame as is the convention in warbleR functions
X <- selec.table
# Cut wave for the first row
wvcut <- tuneR::readWave(as.character(X$sound.files[1]), from = X$start[1], to = X$end[1], units = "seconds")
# save cut
tuneR::writeWave(object = wvcut, filename = paste0(as.character(X$sound.files[1]), "-", X$selec[1], ".wav"))
#lets use X for the selection table data frame as is the convention in warbleR functions
X <- selec.table
# Cut wave for the first row
wvcut <- tuneR::readWave(as.character(X$sound.files[1]), from = X$start[1], to = X$end[1], units = "seconds")
# save cut
tuneR::writeWave(object = wvcut, filename = paste0(as.character(X$sound.files[1]), "-", X$selec[1], ".wav"))
list.files(pattern = "\\.wav$", ignore.case = TRUE)
getwd()
#lets use X for the selection table data frame as is the convention in warbleR functions
X <- selec.table
# Cut wave for the first row
wvcut <- tuneR::readWave(as.character(X$sound.files[1]), from = X$start[1], to = X$end[1], units = "seconds")
# save cut
tuneR::writeWave(object = wvcut, filename = paste0(gsub("\\.wav$", "",X$sound.files[1], ignore.case = TRUE), "-", X$selec[1], ".wav"))
list.files(pattern = "\\.wav$", ignore.case = TRUE)
cutFUN <- function(X, i, mar, labels){
# Read sound files, initialize frequency and time limits for spectrogram
r <- tuneR::readWave(as.character(X$sound.files[i]), header = TRUE)
f <- r$sample.rate
t <- c(X$start[i] - mar, X$end[i] + mar)
# fix margins if below 0 or length of recordings
mar1 <- mar
mar2 <- mar1 + X$end[i] - X$start[i]
if (t[1] < 0)  t[1] <- 0
if(t[2] > r$samples/f) t[2] <- r$samples/f
# Cut wave
wvcut <- tuneR::readWave(as.character(X$sound.files[i]), from = t[1], to = t[2], units = "seconds")
tuneR::writeWave(object = wvcut, filename = paste0(as.character(X$sound.files[1]), "-", X$selec[1], ".wav"))
}
out <- pbapply::pblapply(1:nrow(X), function(i) cutFUN(X = X, i = i, mar = mar))
out <- pbapply::pblapply(1:nrow(X), function(i) cutFUN(X = X, i = i, mar = 0.05))
nrow(X)
out <- pbapply::pblapply(1:nrow(X), function(i) cutFUN(X = X, i = i, mar = 0.05))
getwd()
out <- pbapply::pblapply(1:nrow(X), function(i) cutFUN(X = X, i = i, mar = 0.05))
out
out <- pbapply::pblapply(1:nrow(X), function(y) cutFUN(X = selec.table, i = y, mar = 0.05))
out <- pbapply::pblapply(1:nrow(X), function(y) cutFUN(X = selec.table, i = y, mar = 0.05))
cutFUN <- function(X, i, mar){
# Read sound files, initialize frequency and time limits for spectrogram
r <- tuneR::readWave(as.character(X$sound.files[i]), header = TRUE)
f <- r$sample.rate
t <- c(X$start[i] - mar, X$end[i] + mar)
# fix margins if below 0 or length of recordings
mar1 <- mar
mar2 <- mar1 + X$end[i] - X$start[i]
if (t[1] < 0)  t[1] <- 0
if(t[2] > r$samples/f) t[2] <- r$samples/f
# Cut wave
wvcut <- tuneR::readWave(as.character(X$sound.files[i]), from = t[1], to = t[2], units = "seconds")
tuneR::writeWave(object = wvcut, filename = paste0(as.character(X$sound.files[i]), "-", X$selec[i], ".wav"))
}
out <- pbapply::pblapply(1:nrow(X), function(y) cutFUN(X = selec.table, i = y, mar = 0.05))
cut.selections <- function(X, mar){
# internal function to cut each selection
cutFUN <- function(X, i, mar){
# Read sound files, initialize frequency and time limits for spectrogram
r <- tuneR::readWave(as.character(X$sound.files[i]), header = TRUE)
f <- r$sample.rate
t <- c(X$start[i] - mar, X$end[i] + mar)
# fix margins if below 0 or length of recordings
mar1 <- mar
mar2 <- mar1 + X$end[i] - X$start[i]
if (t[1] < 0)  t[1] <- 0
if(t[2] > r$samples/f) t[2] <- r$samples/f
# Cut wave
wvcut <- tuneR::readWave(as.character(X$sound.files[i]), from = t[1], to = t[2], units = "seconds")
tuneR::writeWave(object = wvcut, filename = paste0(as.character(X$sound.files[i]), "-", X$selec[i], ".wav"))
}
# lapply function to run over all selections
out <- pbapply::pblapply(1:nrow(X), function(y) cutFUN(X = selec.table, i = y, mar = 0.05))
}
list.files(pattern = "\\.wav$", ignore.case = TRUE)
file.info(list.files(pattern = "\\.wav$", ignore.case = TRUE))
file.info(list.files(pattern = "\\.wav$", ignore.case = TRUE))$size
wvs <- list.files(pattern = "\\.wav$", ignore.case = TRUE)
wvs
wvs
file.info(list.files(pattern = "\\.wav$", ignore.case = TRUE))$size
sz <- file.info(list.files(pattern = "\\.wav$", ignore.case = TRUE))$size
cbind(wvs, sz)
wvs[sz < 5000]
sz
wvs[sz < 50000]
unlink(wvs[sz < 50000])
wvs
wvs[sz < 50000]
unlink(wvs[sz < 50000])
wvs <- list.files(pattern = "\\.wav$", ignore.case = TRUE)
wvs
cut.selections(X = selec.table, mar = 0.05)
list.files(pattern = "\\.wav$", ignore.case = TRUE)
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
wdX <- getwd()
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
setwd(wdX)
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
shinyjs:::colourPickerAddin()
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
out <- pbapply::pblapply(1:nrow(selec.table), function(y)
cutFUN(X = selec.table, i = y, mar = 0.05))
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
wdX <- getwd()
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
setwd(wdX)
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Individual sound files for each selection.Rmd", rm.output.text = F)
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
wdX <- getwd()
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
setwd(wdX)
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Creating song catalogs.Rmd", categories = "spectrograms", rm.output.text = F)
