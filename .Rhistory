{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) eval(parse(text = i))
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T))
rm.sf.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.png$", ignore.case = T))
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.png$|\\.pdf$", ignore.case = T))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$", ignore.case = T)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T)))]
))
#find text in functions
find.text <- function(pattern){
rfiles <- list.files(pattern = "\\.R$", path = "/home/m/Dropbox/warbleR/R", full.names = T)
#check where a word is found in each function an return the name of function where it was found and the time
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = T)
if(length(y)>0) {
print(f)
for(i in y) print(i)
}
}
}
#replace text
repl.text <- function(pattern, repl){
rfiles <- list.files(pattern = "\\.R$", path = "/home/m/Dropbox/warbleR/R", full.names = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#bid data set
big.seltab <- function(X, nrow = 100){
while(nrow(X) < nrow)
X <- rbind(X, X)
X <- X[1:nrow,]
X$selec <- 1:nrow(X)
return(X)
}
#write all wav files in selec.table
write.wavs <- function(path = tempdir()){
setwd(path)
data(list = c("Phae.long1", "Phae.long2",  "Phae.long3",  "Phae.long4","selec.table"))
writeWave(Phae.long2, "Phae.long2.wav") #save sound files
writeWave(Phae.long1, "Phae.long1.wav")
writeWave(Phae.long3, "Phae.long3.wav") #save sound files
writeWave(Phae.long4, "Phae.long4.wav")
}
write.wavs()
getwd()
setwd(tempdir())
getwd()
catalog(X = selec.table[1:10,], flim = c(1, 10), nrow = 5, ncol = 2,
same.time.scale = FALSE, mar = 0.01, wl = 200, legend = 1,
gr = FALSE, tags = c("sound.files"), leg.wd = 10)
getwd()
write.wavs()
catalog(X = selec.table[1:10,], flim = c(1, 10), nrow = 5, ncol = 2,
same.time.scale = FALSE, mar = 0.01, wl = 200, legend = 1,
gr = FALSE, tags = c("sound.files"), leg.wd = 10)
last.img()
open.wd()
catalog(X = selec.table[1:10,], flim = c(1, 10), nrow = 5, ncol = 2,
same.time.scale = TRUE, mar = 0.01, wl = 200, gr = FALSE)
last.img()
catalog(X = selec.table[1:10,], flim = c(1, 10), nrow = 5, ncol = 2,
same.time.scale = TRUE, mar = 0.01, wl = 200, gr = FALSE,
orientation = "h",  tags = c("sound.files", "selec"), leg.wd = 10)
last.img()
Y <- selec.table
for(i in 1:4) Y <- rbind(Y, Y)
#simulated columns
Y$songtype <- sample(letters[1:3], nrow(Y), replace = T)
Y$site <- rep(letters[4:25], nrow(Y))[1:nrow(Y)]
#sort by site and the by song type
Y <- Y[sort(Y$site, Y$songtype), ]
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(terrain.colors, temp.colors),
tags = c("songtype", "site"))
Y <- Y[order(Y$site, Y$songtype), ]
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(terrain.colors, temp.colors),
tags = c("songtype", "site"))
last.img()
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(terrain.colors, temp.colors))
last.img()
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(terrain.colors, temp.colors),
tags = c("songtype", "site"))
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(gray.colors, temp.colors),
tags = c("songtype", "site"))
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(gray.colors, temp.colors),
tags = c("songtype", "site"), hatching = 2)
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(topo.colors, temp.colors),
tags = c("songtype", "site"), hatching = 2)
source('~/Dropbox/warbleR/R/catalog.R')
source('~/Dropbox/warbleR/R/rectw.R')
source('~/Dropbox/warbleR/R/spectro2.R')
snr <- sig2noise(X = Y)
snr <- sig2noise(X = Y, mar = 0.04)
names(snr)
source('~/Dropbox/warbleR/R/catalog.R')
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(topo.colors, temp.colors),
tags = c("songtype", "site"), hatching = 2, breaks = c(6))
Ysnr <- sig2noise(X = Y, mar = 0.04)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(topo.colors, temp.colors),
tags = c("songtype", "site"), hatching = 2, breaks = c(6))
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(topo.colors, temp.colors),
tags = c("songtype", "snr"), hatching = 2, breaks = 6)
catalog(X = Y, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(topo.colors, temp.colors),
tags = c("songtype", "SNR"), hatching = 2, breaks = 6)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(topo.colors, temp.colors),
tags = c("songtype", "SNR"), hatching = 2, breaks = 6)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(temp.colors, heat.colors),
tags = c("songtype", "SNR"), hatching = 0, breaks = 6)
set.seed(27)
Ysnr <- Ysnr[sample(1:nrow(Ysnr)),]
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200,
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(temp.colors, heat.colors),
tags = c("songtype", "SNR"), hatching = 0, breaks = 6)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200, tag.widths = c(2, 1),
labels = c("sound.files","songtype", "site"), legend = 3,
width = 23, height = 30, tag.pal = list(temp.colors, heat.colors),
tags = c("songtype", "SNR"), hatching = 1, breaks = 6)
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#     if(rm.output.text)
#    {
#     #determine start and end of output chuncks
#     a1 <-   grep("{% highlight text %}", x, fixed = T)
#     a2 <- numeric(length = length(a1))
#     A <- list()
#     for(i in 1:length(a1)) {
#       z <- grep("{% endhighlight %}", x, fixed = T)
#     a2[i] <- z[z > a1[i]][1]
#     A[[i]] <- a1[i]:a2[i]
#     }
#
#     A <- unlist(A)
#     x <- x[-A]
#       }
#
#     #add categories and tags
#     if(tags.eq.cats)
#       tags <- categories
#
#        dl2 <- grep("date:", x)
#     x <- c(x[1:dl2], paste("categories:", categories), x[(dl2 + 1):length(x)])
#     x <- c(x[1:(dl2 + 1)], paste("tags:", tags), x[(dl2 + 2):length(x)])
#
#
#     #add space before and after chuncks
#       #determine start and end of chuncks
#           b1 <-  grep("{% highlight r %}", x, fixed = T)
#     for(i in 1:length(b1))
#     {
#       #add before
#       pos <- grep("{% highlight r %}", x, fixed = T)[i]
#       # if(x[pos - 1] != "")
#         x <- c(x[1:(pos - 1)], "<br>", x[pos:length(x)])
#     }
#
#       b2 <-  grep("{% endhighlight %}", x, fixed = T)
#     for(i in 1:length(b2))
#     {
#       #add after
#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
}
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
wdX <- getwd()
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#     if(rm.output.text)
#    {
#     #determine start and end of output chuncks
#     a1 <-   grep("{% highlight text %}", x, fixed = T)
#     a2 <- numeric(length = length(a1))
#     A <- list()
#     for(i in 1:length(a1)) {
#       z <- grep("{% endhighlight %}", x, fixed = T)
#     a2[i] <- z[z > a1[i]][1]
#     A[[i]] <- a1[i]:a2[i]
#     }
#
#     A <- unlist(A)
#     x <- x[-A]
#       }
#
#     #add categories and tags
#     if(tags.eq.cats)
#       tags <- categories
#
#        dl2 <- grep("date:", x)
#     x <- c(x[1:dl2], paste("categories:", categories), x[(dl2 + 1):length(x)])
#     x <- c(x[1:(dl2 + 1)], paste("tags:", tags), x[(dl2 + 2):length(x)])
#
#
#     #add space before and after chuncks
#       #determine start and end of chuncks
#           b1 <-  grep("{% highlight r %}", x, fixed = T)
#     for(i in 1:length(b1))
#     {
#       #add before
#       pos <- grep("{% highlight r %}", x, fixed = T)[i]
#       # if(x[pos - 1] != "")
#         x <- c(x[1:(pos - 1)], "<br>", x[pos:length(x)])
#     }
#
#       b2 <-  grep("{% endhighlight %}", x, fixed = T)
#     for(i in 1:length(b2))
#     {
#       #add after
#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
setwd(wdX)
}
setwd(tempdir())
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Creating song catalogs.Rmd", categories = "spectrograms", rm.output.text = F)
getwd()
catalog(X = selec.table[1:10,], flim = c(1, 10), nrow = 5, ncol = 2,
same.time.scale = TRUE, mar = 0.01, wl = 200, gr = FALSE)
catalog(X = selec.table[1:10,], flim = c(1, 10), nrow = 5, ncol = 2,
same.time.scale = FALSE, mar = 0.01, wl = 200, legend = 1,
tags = c("sound.files"), leg.wd = 10)
sp <- specan(X = Ysnr, mar = 0.04)
sp <- specan(X = Ysnr)
sp
sp <- specan(X = Ysnr)[,"sp.ent"]
sp
Ysnr$sp.ent <- specan(X = Ysnr)[,"sp.ent"]
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200, tag.widths = c(1, 1),
labels = c("sound.files","songtype"), legend = 3,
width = 23, height = 30, tag.pal = list(temp.colors, heat.colors),
tags = c("sp.ent", "SNR"), hatching = 0, breaks = c(8, 8))
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Creating song catalogs.Rmd", categories = "spectrograms", rm.output.text = F)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
same.time.scale = TRUE, mar = 0.01, wl = 200, tag.widths = c(1, 1),
labels = c("sound.files","songtype"), legend = 2,
width = 23, height = 30, tag.pal = list(temp.colors, heat.colors),
tags = c("sp.ent", "SNR"), hatching = 0, breaks = 15)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 3,  width = 23, height = 30, tag.pal = list(temp.colors, heat.colors), tags = c("sp.ent", "SNR"),
hatching = 0, breaks = c(8, 8))
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 2,  width = 23, height = 30, tag.pal = list(temp.colors, heat.colors), tags = c("sp.ent", "SNR"), hatching = 0, breaks = 15)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 1,  width = 23, height = 30, tag.pal = list(temp.colors, heat.colors), tags = c("sp.ent", "SNR"), hatching = 0, breaks = 15)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 3,  width = 23, height = 30, tag.pal = list(temp.colors, heat.colors), tags = c("sp.ent", "SNR"),
hatching = 0, breaks = c(8, 8))
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 3,  width = 23, height = 30, tag.pal = list(temp.colors, heat.colors), tags = c("sp.ent", "SNR"),
hatching = 0, breaks = c(3, 3))
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 3,  width = 23, height = 30, tag.pal = list(temp.colors, heat.colors), tags = c("sp.ent", "SNR"),
hatching = 0, breaks = c(3, 2))
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 1,  width = 23, height = 30, tag.pal = list(temp.colors, heat.colors), tags = c("sp.ent", "SNR"), hatching = 0, breaks = 15)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 1,  width = 23, height = 30, tag.pal = list(temp.colors, heat.colors), tags = c("sp.ent", "SNR"), hatching = 0, breaks = 4)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 1,  width = 23, height = 30, tag.pal = list(temp.colors, gray.colors), tags = c("sp.ent", "SNR"), hatching = 0, breaks = 4)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 1,  width = 23, height = 30, tag.pal = list(temp.colors, gray.colors), tags = c("sp.ent", "SNR"), hatching = 2, breaks = 4)
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 3,  width = 23, height = 30, tag.pal = list(temp.colors, gray.colors), tags = c("sp.ent", "SNR"),
hatching = 2, breaks = c(3, 2))
catalog(X = Ysnr, flim = c(1, 10), nrow = 12, ncol = 5, cex = 2, leg.wd = 8,
mar = 0.01, wl = 200, legend = 1,  width = 23, height = 30, tag.pal = list(temp.colors, gray.colors), tags = c("sp.ent", "SNR"), hatching = 2, breaks = 4)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Creating song catalogs.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Creating song catalogs.Rmd", categories = "spectrograms", rm.output.text = F)
