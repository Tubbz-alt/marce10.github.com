rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(site.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/marce10.github.com/_Rmd/", pattern = "\\.wav$"))
setwd(wdX)
}
x<-c("warbleR", "monitoR")
A <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  install.packages(y)
require(y, character.only = T)
})
#write files in temporal file
setwd(tempdir())
# load sound files and data
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
#write files to disk
writeWave(Phae.long1,"Phae.long1.wav")
writeWave(Phae.long2,"Phae.long2.wav")
writeWave(Phae.long3,"Phae.long3.wav")
writeWave(Phae.long4,"Phae.long4.wav")
writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
phae1T1<-makeCorTemplate("Phae.long1.wav", t.lim=c(selec.table$start[2],selec.table$end[2]),wl = 300,ovlp=90,
frq.lim=c(1, 11), dens=1, name="phae11")
phae2T1<-makeCorTemplate("Phae.long2.wav", t.lim=c(selec.table$start[5],selec.table$end[5]),wl = 300,ovlp=90,
frq.lim=c(1, 11), dens=1, name="phae21")
phae3T1<-makeCorTemplate("Phae.long3.wav", t.lim=c(selec.table$start[7],selec.table$end[7]),wl = 300,ovlp=90,
frq.lim=c(1, 11), dens=1, name="phae31")
phae4T1<-makeCorTemplate("Phae.long4.wav", t.lim=c(selec.table$start[9],selec.table$end[9]),wl = 300,ovlp=90,
frq.lim=c(1, 11), dens=1, name="phae41")
#write files in temporal directory
setwd(tempdir()))
# load sound files and data
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
#write files to disk
writeWave(Phae.long1,"Phae.long1.wav")
writeWave(Phae.long2,"Phae.long2.wav")
writeWave(Phae.long3,"Phae.long3.wav")
writeWave(Phae.long4,"Phae.long4.wav")
phae2T1 <- makeCorTemplate("Phae.long2.wav", t.lim = c(selec.table$start[5],selec.table$end[5]), wl = 300, ovlp = 90,
frq.lim = c(1, 11), dens = 1, name = "phae21")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11")
phae2T1 <- makeCorTemplate("Phae.long2.wav", t.lim = c(selec.table$start[5],selec.table$end[5]), wl = 300, ovlp = 90,
frq.lim = c(1, 11), dens = 1, name = "phae21")
phae3T1 <- makeCorTemplate("Phae.long3.wav", t.lim = c(selec.table$start[7], selec.table$end[7]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae31")
phae4T1 <- makeCorTemplate("Phae.long4.wav", t.lim = c(selec.table$start[9],selec.table$end[9]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae41")
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11", score.cutoff = 60)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11", score.cutoff = 50)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11", score.cutoff = 40)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11", score.cutoff = 30)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11", score.cutoff = 30)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11", score.cutoff = 20)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11", score.cutoff = 10)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11", score.cutoff = 70)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae11")
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1")
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 20)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo", cor.method = "pearson", warn = FALSE,write.wav = TRUE)
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(selec.table$start[2], selec.table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 20)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 20)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
cdetectsPhae1
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 90)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 80)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
cdetectsPhae1
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1")
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.5)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = NULL)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = 0)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = 1)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "2020-04-10")
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "2020-01-01_0101_MT")
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
cdetectsPhae1
detec_monitor <- function(x){
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.5)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
}
lbh_selec_table2
lbh_selec_table
xc.output <- xcorr(X = lbh_selec_table[2, ], output = "list",
compare.matrix = comp_matrix, path = tempdir())
source('~/sda5/Dropbox/R_package_testing/warbleR/warbleR/R/xcorr.R')
xc.output <- xcorr(X = lbh_selec_table[2, ], output = "list",
compare.matrix = comp_matrix, path = tempdir())
lbh_selec_table[2, ]
comp_matrix
lbh_selec_table2
lbh_selec_table2[2, ]
xc.output <- xcorr(X = lbh_selec_table2[2, ], output = "list",
compare.matrix = comp_matrix, path = tempdir())
lbh_selec_table
comp_matrix
lbh_selec_table[2, ]
xc.output <- xcorr(X = lbh_selec_table[2, , drop = FALSE], output = "list",
compare.matrix = comp_matrix, path = tempdir())
comp_matrix
data(list = c("Phae.long1", "Phae.long2", "lbh_selec_table2", "comp_matrix"))
# save sound files
writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
# run cross-correlation
xc.output <- xcorr(X = lbh_selec_table2, output = "list",
compare.matrix = comp_matrix, path = tempdir())
xc.output
comp_matrix
comp_matrix
xc.output <- xcorr(X = lbh_selec_table[2, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir())
lbh_selec_table
xc.output <- xcorr(X = lbh_selec_table2[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir())
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir())
xc.output
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir())
cdetectsPhae1
pks
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.4)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
# View results
plot(cdetectsPhae1, hit.marker="points")
spectrograms(X = pks, wl = 300)
spectrograms(X = pks, wl = 300, flim = c(0, 12))
open_wd()
spectrograms(X = pks, wl = 300, flim = c(0, 12), by.song = "sound.files")
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
spectrograms(X = pks, wl = 300, by.song = "sound.files")
spectrograms(X = pks, wl = 300, by.song = "sound.files", collevels = seq(-100, 0, 5))
spectrograms(X = pks, wl = 300, by.song = "sound.files", collevels = seq(-100, 0, 5), xl = 3)
spectrograms(X = pks, wl = 200, by.song = "sound.files", collevels = seq(-100, 0, 5), xl = 3)
spectrograms(X = pks, wl = 200, by.song = "sound.files", collevels = seq(-100, 0, 5), xl = 3, pb = FALSE)
spectrograms(X = pks, wl = 200, by.song = "sound.files", collevels = seq(-80, 0, 5), xl = 3, pb = FALSE)
x<-c("warbleR", "monitoR", "microbenchmark")
A <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  install.packages(y)
require(y, character.only = T)
})
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 3)
# warbleR detection
detec_warbleR <- function(x){
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir())
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir())
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
}
# monitoR detection
detec_monitor <- function(x){
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.5)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
}
# warbleR detection
detec_warbleR <- function(x){
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir())
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir())
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
}
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 3)
autoplot(mb)
ggplot2::autoplot(bm)
ggplot2::autoplot(mb)
mb
mb$time
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 10)
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir(), pb = FALSE)
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir(), pb = FALSE)
ggplot2::autoplot(mb)
tapply(mb$time, mb$expr, mean)
mean_times <- tapply(mb$time, mb$expr, mean)
mean_times[1] / mean_times[2]
mean_times[2] / mean_times[1]
# how monitoR compares to warbleR
round(mean_times[2] / mean_times[1], 2)
# monitoR detection
detec_monitor <- function(x){
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.5)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
}
# warbleR detection
detec_warbleR <- function(x){
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir(), pb = FALSE)
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir(), pb = FALSE)
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
}
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 2)
ggplot2::autoplot(mb)
ggplot2::autoplot(mb)
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 3)
ggplot2::autoplot(mb)
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 100)
ggplot2::autoplot(mb)
saveRDS("microbenchmark_results.RDS")
saveRDS(mb,"microbenchmark_results.RDS")
ggplot2::autoplot(mb)
# monitoR detection
detec_monitor <- function(x){
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.4, write.wav = FALSE)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
}
# warbleR detection
detec_warbleR <- function(x){
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir(), pb = FALSE, parallel = 3)
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir(), pb = FALSE parallel = 3)
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
}
# monitoR detection
detec_monitor <- function(x){
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.4, write.wav = FALSE)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
}
# warbleR detection
detec_warbleR <- function(x){
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir(), pb = FALSE, parallel = 3)
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir(), pb = FALSE, parallel = 3)
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
}
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 100)
saveRDS(mb, "microbenchmark_results.RDS")
# mb <- readRDS("./img/microbenchmark_results.RDS")
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 10)
x<-c("warbleR", "monitoR", "microbenchmark", "ggplot2")
A <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  install.packages(y)
require(y, character.only = T)
})
autoplot(mb)
# mean time per function
mean_times <- tapply(mb$time, mb$expr, mean)
# how monitoR compares to warbleR
round(mean_times[2] / mean_times[1], 2)
# monitoR detection
detec_monitor <- function(x){
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.4, write.wav = FALSE)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1, parallel = TRUE)
}
# warbleR detection
detec_warbleR <- function(x){
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir(), pb = FALSE)
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir(), pb = FALSE)
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
}
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 100)
saveRDS(mb, "microbenchmark_results.RDS")
autoplot(mb)
# print results
mb
# mean time per function
mean_times <- tapply(mb$time, mb$expr, mean)
# how monitoR compares to warbleR
round(mean_times[2] / mean_times[1], 2)
# monitoR detection
detec_monitor <- function(x){
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.4, write.wav = FALSE)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1)
}
# warbleR detection
detec_warbleR <- function(x){
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir(), pb = FALSE)
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir(), pb = FALSE)
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
}
# monitoR detection
detec_monitor <- function(x){
phae1T1 <- makeCorTemplate("Phae.long1.wav", t.lim = c(lbh_selec_table$start[2], lbh_selec_table$end[2]), wl = 300, ovlp = 90, frq.lim = c(1, 11), dens = 1, name = "phae1T1", score.cutoff = 0.4, write.wav = FALSE)
cscoresPhae1 <- corMatch(survey = "Phae.long1.wav",templates = phae1T1, parallel = TRUE, show.prog = FALSE, time.source = "fileinfo")
# find peaks
cdetectsPhae1 <- findPeaks(cscoresPhae1)
}
# warbleR detection
detec_warbleR <- function(x){
xc.output <- xcorr(X = lbh_selec_table[1, ], output = "list",
compare.matrix = matrix(c("Phae.long1.wav-1", "Phae.long1.wav"), ncol = 2), path = tempdir(), pb = FALSE)
# find peaks
pks <- find_peaks(xc.output = xc.output, path = tempdir(), pb = FALSE)
pks$bottom.freq <- lbh_selec_table$bottom.freq[1]
pks$top.freq <- lbh_selec_table$top.freq[1]
}
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 100)
autoplot(mb)
mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 100)
autoplot(mb)
# mean time per function
mean_times <- tapply(mb$time, mb$expr, mean)
# how monitoR compares to warbleR
round(mean_times[2] / mean_times[1], 2)
mb
mb[1,]
mb[101,]
mb[102,]
mb$time[102]
mb$time[102] <- mb$time[102]*2
# mean time per function
mean_times <- tapply(mb$time, mb$expr, mean)
# how monitoR compares to warbleR
round(mean_times[2] / mean_times[1], 2)
mb$time[102] <- mb$time[102]*2
# mean time per function
mean_times <- tapply(mb$time, mb$expr, mean)
# how monitoR compares to warbleR
round(mean_times[2] / mean_times[1], 2)
mb$time[102] <- mb$time[102]*2
# mean time per function
mean_times <- tapply(mb$time, mb$expr, mean)
# how monitoR compares to warbleR
round(mean_times[2] / mean_times[1], 2)
# mb <- microbenchmark(detec_warbleR(), detec_monitor(), times = 100)
#
saveRDS(mb, "microbenchmark_results.RDS")
KnitPost(site.path = "~/sda5/Dropbox/Websites/Blog/marce10.github.com/", rmd.file =  "~/sda5/Dropbox/Websites/Blog/marce10.github.com/_Rmd/signal detection warbleR vs monitoR.Rmd", rm.output.text = F)
KnitPost(site.path = "~/sda5/Dropbox/Websites/Blog/marce10.github.com/", rmd.file =  "~/sda5/Dropbox/Websites/Blog/marce10.github.com/_Rmd/signal detection warbleR vs monitoR.Rmd", rm.output.text = F)
KnitPost(site.path = "~/sda5/Dropbox/Websites/Blog/marce10.github.com/", rmd.file =  "~/sda5/Dropbox/Websites/Blog/marce10.github.com/_Rmd/signal detection warbleR vs monitoR.Rmd", rm.output.text = F)
KnitPost(site.path = "~/sda5/Dropbox/Websites/Blog/marce10.github.com/", rmd.file =  "~/sda5/Dropbox/Websites/Blog/marce10.github.com/_Rmd/signal detection warbleR vs monitoR.Rmd", rm.output.text = F)
#run this
bundle install
setwd("~/sda5/Dropbox/Websites/Blog/marce10.github.com")
KnitPost(site.path = "~/sda5/Dropbox/Websites/Blog/marce10.github.com/", rmd.file =  "~/sda5/Dropbox/Websites/Blog/marce10.github.com/_Rmd/signal detection warbleR vs monitoR.Rmd", rm.output.text = F)
KnitPost(site.path = "~/sda5/Dropbox/Websites/Blog/marce10.github.com/", rmd.file =  "~/sda5/Dropbox/Websites/Blog/marce10.github.com/_Rmd/signal detection warbleR vs monitoR.Rmd", rm.output.text = F)
KnitPost(site.path = "~/sda5/Dropbox/Websites/Blog/marce10.github.com/", rmd.file =  "~/sda5/Dropbox/Websites/Blog/marce10.github.com/_Rmd/signal detection warbleR vs monitoR.Rmd", rm.output.text = F)
KnitPost(site.path = "~/sda5/Dropbox/Websites/Blog/marce10.github.com/", rmd.file =  "~/sda5/Dropbox/Websites/Blog/marce10.github.com/_Rmd/signal detection warbleR vs monitoR.Rmd", rm.output.text = F)
#or
setwd("~/Dropbox/Websites/Blog/marce10.github.com")
#or
setwd("~/sda5/Dropbox/Websites/Blog/marce10.github.com")
system("git add .")
system('git commit -m "xcorr warbleR vs monitor"')
system("git push origin HEAD:master")
