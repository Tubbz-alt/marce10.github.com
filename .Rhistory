#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Detecting_signals_with_monitoR.Rmd", categories = "cross-correlation, automatic detection", rm.output.text = F)
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5 * 2, fig.height=5.25 * 2, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 36)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#     if(rm.output.text)
#    {
#     #determine start and end of output chuncks
#     a1 <-   grep("{% highlight text %}", x, fixed = T)
#     a2 <- numeric(length = length(a1))
#     A <- list()
#     for(i in 1:length(a1)) {
#       z <- grep("{% endhighlight %}", x, fixed = T)
#     a2[i] <- z[z > a1[i]][1]
#     A[[i]] <- a1[i]:a2[i]
#     }
#
#     A <- unlist(A)
#     x <- x[-A]
#       }
#
#     #add categories and tags
#     if(tags.eq.cats)
#       tags <- categories
#
#        dl2 <- grep("date:", x)
#     x <- c(x[1:dl2], paste("categories:", categories), x[(dl2 + 1):length(x)])
#     x <- c(x[1:(dl2 + 1)], paste("tags:", tags), x[(dl2 + 2):length(x)])
#
#
#     #add space before and after chuncks
#       #determine start and end of chuncks
#           b1 <-  grep("{% highlight r %}", x, fixed = T)
#     for(i in 1:length(b1))
#     {
#       #add before
#       pos <- grep("{% highlight r %}", x, fixed = T)[i]
#       # if(x[pos - 1] != "")
#         x <- c(x[1:(pos - 1)], "<br>", x[pos:length(x)])
#     }
#
#       b2 <-  grep("{% endhighlight %}", x, fixed = T)
#     for(i in 1:length(b2))
#     {
#       #add after
#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Detecting_signals_with_monitoR.Rmd", categories = "cross-correlation, automatic detection", rm.output.text = F)
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#     if(rm.output.text)
#    {
#     #determine start and end of output chuncks
#     a1 <-   grep("{% highlight text %}", x, fixed = T)
#     a2 <- numeric(length = length(a1))
#     A <- list()
#     for(i in 1:length(a1)) {
#       z <- grep("{% endhighlight %}", x, fixed = T)
#     a2[i] <- z[z > a1[i]][1]
#     A[[i]] <- a1[i]:a2[i]
#     }
#
#     A <- unlist(A)
#     x <- x[-A]
#       }
#
#     #add categories and tags
#     if(tags.eq.cats)
#       tags <- categories
#
#        dl2 <- grep("date:", x)
#     x <- c(x[1:dl2], paste("categories:", categories), x[(dl2 + 1):length(x)])
#     x <- c(x[1:(dl2 + 1)], paste("tags:", tags), x[(dl2 + 2):length(x)])
#
#
#     #add space before and after chuncks
#       #determine start and end of chuncks
#           b1 <-  grep("{% highlight r %}", x, fixed = T)
#     for(i in 1:length(b1))
#     {
#       #add before
#       pos <- grep("{% highlight r %}", x, fixed = T)[i]
#       # if(x[pos - 1] != "")
#         x <- c(x[1:(pos - 1)], "<br>", x[pos:length(x)])
#     }
#
#       b2 <-  grep("{% endhighlight %}", x, fixed = T)
#     for(i in 1:length(b2))
#     {
#       #add after
#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
}
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#     if(rm.output.text)
#    {
#     #determine start and end of output chuncks
#     a1 <-   grep("{% highlight text %}", x, fixed = T)
#     a2 <- numeric(length = length(a1))
#     A <- list()
#     for(i in 1:length(a1)) {
#       z <- grep("{% endhighlight %}", x, fixed = T)
#     a2[i] <- z[z > a1[i]][1]
#     A[[i]] <- a1[i]:a2[i]
#     }
#
#     A <- unlist(A)
#     x <- x[-A]
#       }
#
#     #add categories and tags
#     if(tags.eq.cats)
#       tags <- categories
#
#        dl2 <- grep("date:", x)
#     x <- c(x[1:dl2], paste("categories:", categories), x[(dl2 + 1):length(x)])
#     x <- c(x[1:(dl2 + 1)], paste("tags:", tags), x[(dl2 + 2):length(x)])
#
#
#     #add space before and after chuncks
#       #determine start and end of chuncks
#           b1 <-  grep("{% highlight r %}", x, fixed = T)
#     for(i in 1:length(b1))
#     {
#       #add before
#       pos <- grep("{% highlight r %}", x, fixed = T)[i]
#       # if(x[pos - 1] != "")
#         x <- c(x[1:(pos - 1)], "<br>", x[pos:length(x)])
#     }
#
#       b2 <-  grep("{% endhighlight %}", x, fixed = T)
#     for(i in 1:length(b2))
#     {
#       #add after
#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Detecting_signals_with_monitoR.Rmd", categories = "cross-correlation, automatic detection", rm.output.text = F)
require("warbleR")
CR.recs <- querxc(qword = 'cnt:"costa rica"', download = FALSE)
nrow(CR.recs)
nrow(CR.recs)
unique(CR.recs$Vocalization_type)
lenth(unique(CR.recs$English_name))
length(unique(CR.recs$English_name))
CR.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T),]
CR.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T),]
CR.no.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T, invert = T),]
CR.no.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T, invert = T),]
CR.songs <- CR.songs[!duplicated(CR.songs$English_name),]
CR.no.songs <- CR.no.songs[!duplicated(CR.no.songs$English_name),]
CR.songs
nrow(CR.songs)
nrow(CR.no.songs)
nrow(CR.songs)
querxc(X = CR.songs[1,])
CR.recs$Quality
order(match(CR.recs$Quality, c("A", "B", "C", "D", "E", "no score")))
CR.songs <- CR.recs[order(order(match(CR.recs$Quality,
c("A", "B", "C", "D", "E", "no score")))),]
CR.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T),]
CR.no.songs <- CR.recs[grep("song",
CR.recs$Vocalization_type, ignore.case = T, invert = T),]
CR.songs <- CR.recs[order(order(match(CR.recs$Quality,
c("A", "B", "C", "D", "E", "no score")))),]
CR.songs <- CR.songs[!duplicated(CR.songs$English_name),]
CR.no.songs <- CR.no.songs[!duplicated(CR.no.songs$English_name),]
table(CR.songs$Quality)
CR.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T),]
CR.no.songs <- CR.recs[grep("song",
CR.recs$Vocalization_type, ignore.case = T, invert = T),]
CR.songs <- CR.songs[!duplicated(CR.songs$English_name),]
CR.no.songs <- CR.no.songs[!duplicated(CR.no.songs$English_name),]
table(CR.songs$Quality)
nrow(CR.songs)
CR.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T),]
CR.no.songs <- CR.recs[grep("song",
CR.recs$Vocalization_type, ignore.case = T, invert = T),]
CR.songs <- CR.recs[order(order(match(CR.recs$Quality,
c("A", "B", "C", "D", "E", "no score")))),]
CR.songs <- CR.songs[!duplicated(CR.songs$English_name),]
CR.no.songs <- CR.no.songs[!duplicated(CR.no.songs$English_name),]
nrow(CR.songs)
CR.recs <- CR.recs[order(order(match(CR.recs$Quality,
c("A", "B", "C", "D", "E", "no score")))),]
CR.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T),]
CR.no.songs <- CR.recs[grep("song",
CR.recs$Vocalization_type, ignore.case = T, invert = T),]
CR.songs <- CR.songs[!duplicated(CR.songs$English_name),]
CR.no.songs <- CR.no.songs[!duplicated(CR.no.songs$English_name),]
nrow(CR.songs)
nrow(CR.no.songs)
CR.recs <- querxc(qword = 'cnt:"costa rica"', download = FALSE, pb = FALSE)
nrow(CR.recs)
length(unique(CR.recs$English_name))
CR.recs <- CR.recs[order(order(match(CR.recs$Quality,
c("A", "B", "C", "D", "E", "no score")))),]
CR.songs <- CR.recs[grep("song", CR.recs$Vocalization_type, ignore.case = T),]
CR.no.songs <- CR.recs[grep("song",
CR.recs$Vocalization_type, ignore.case = T, invert = T),]
CR.songs <- CR.songs[!duplicated(CR.songs$English_name),]
CR.no.songs <- CR.no.songs[!duplicated(CR.no.songs$English_name),]
nrow(CR.songs)
nrow(CR.no.songs)
!CR.no.songs$English_name %in% CR.songs$English_name
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Obtain a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
sKnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Obtain a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Obtain a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
