{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
indx
plot(abs(diff(dfreq[,2])))
indx[1:3]
!indx[1:3]
which(!indx[1:3])
if(length(indx) > 10 & any(!indx[1:3])) indx[which(!indx[1:3]) + 1:length(indx)]
indx
indx[(which(!indx[1:3]) + 1):length(indx)]
1:(which(!indx[2:3]))
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
indx
indx[1:(which(!indx[2:3]))]
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which((nrow(dfreq)-2):(nrow(dfreq)-1)):nrow(dfreq)] <- FALSE
indx
source('~/Dropbox/warbleR/R/trackfreqs.R')
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.4)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
trackfreqs(X = fr.ad[1,], wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
16
trackfreqs(X = fr.ad[16,], wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
trackfreqs(X = fr.ad[16,], wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
i = 1
r <- tuneR::readWave(as.character(X$sound.files[i]), header = TRUE)
f <- r$sample.rate
t <- c(X$start[i] - mar, X$end[i] + mar)
#adjust margins if signal is close to start or end of sound file
mar1 <- mar
if(t[1] < 0) {
t[1] <- 0
mar1 <- X$start[i]
}
mar2 <- mar1 + X$end[i] - X$start[i]
if(t[2] > r$samples/f) t[2] <- r$samples/f
# read rec segment
r <- tuneR::readWave(as.character(X$sound.files[i]), from = t[1], to = t[2], units = "seconds")
#in case bp its higher than can be due to sampling rate
if(bp[1] == "frange") bp <- c(X$low.freq[i], X$high.freq[i])
b <- bp
if(b[2] > ceiling(r@samp.rate/2000) - 1) b[2] <- ceiling(r@samp.rate/2000) - 1
fl<- flim #in case flim its higher than can be due to sampling rate
if(fl[2] > ceiling(f/2000) - 1) fl[2] <- ceiling(f/2000) - 1
if(osci == TRUE) hts <- c(3, 2) else hts <- NULL
if(sc == TRUE) wts <- c(3, 1) else wts <- NULL
par(mar = inner.mar)
par(oma = outer.mar)
if(!frange.detec){
suppressWarnings(spectro.INTFUN(r, f = f, wl = wl, ovlp = ovlp, heights = hts,
wn = "hanning", widths = wts, palette = pal, osc = osci, grid = gr, scale = sc, collab = "black",
cexlab = cexlab, cex.axis = 0.5*picsize, flim = fl, tlab = "Time (s)",
flab = "Frequency (kHz)", alab = "", fast.spec = fast.spec, ...))
if(title){
if(is.null(img.suffix))
title(paste(X$sound.files[i], X$selec[i], sep = "-"), cex.main = cexlab) else
title(paste(X$sound.files[i], X$selec[i], img.suffix, sep = "-"), cex.main = cexlab)
}
} else {
frng <- frd.INTFUN(wave = seewave::cutw(r, from = mar1, to = mar2, output = "Wave"), wl = wl.freq, fsmooth = fsmooth, threshold = threshold.freq, wn = wn, flim = fl, bp = b, ovlp = ovlp)
if(!all(is.na(frng$frange))) b <- as.numeric(frng$frange)
# set limits for color rectangles down
if(is.null(bp)) lims <- flim else lims <- bp
b[is.na(b)] <- lims[is.na(b)]
b <- sort(b)
# split screen
m <- rbind(c(0, widths[1]/sum(widths), 0, 0.93), #1
c(widths[1]/sum(widths), 1, 0 , 0.93),
c(0, 1,  0.93 , 1)) #3
invisible(close.screen(all.screens = TRUE))
split.screen(m)
screen(1)
par(mar = c(3.4, 3.4, 0.5, 0))
# create spectro
spectro.INTFUN.2(wave = r, f = f, flim = fl, fast.spec = fast.spec, palette = pal, ovlp = ovlp, wl = wl, grid = F, tlab = "", flab = "")
#add green polygon on detected frequency bands
rect(xleft = 0, ybottom = b[1], xright = length(r@left)/f, ytop = b[2], col = adjustcolor("green3", 0.1), border = adjustcolor("gray", 0.2))
#add line highlighting freq range
abline(h = b, col = "#80C3FF", lty = 3, lwd = 2)
# add axis labels
mtext(side = 1, text = "Time (s)", line = 2.3)
mtext(side = 2, text = "Frequency (kHz)", line = 2.3)
}
options(warn = -1)
if(contour %in% c("both", "ff") & is.null(custom.contour))
{
if(ff.method == "seewave")
ffreq1 <- seewave::fund(wave = r, wl = wl, from = mar1, to = mar2,
fmax= b[2]*1000, f = f, ovlp = ovlp, threshold = threshold.time, plot = FALSE) else
{ff1 <- tuneR::FF(tuneR::periodogram(seewave::cutw(r, f = f, from = mar1, to = mar2, output = "Wave"), width = wl, overlap = wl*ovlp/100), peakheight = (100 - threshold.time) / 100)/1000
ff2 <- seq(0, X$end[i] - X$start[i], length.out = length(ff1))
ffreq1 <- cbind(ff2, ff1)}
ffreq <- matrix(ffreq1[!is.na(ffreq1[,2]),], ncol = 2)
ffreq <- matrix(ffreq[ffreq[,2] > b[1],], ncol = 2)
if(!is.null(freq.continuity)) ffreq <- ffreq[c(0,abs(diff(ffreq[,2]))) <= freq.continuity, ]
# Plot extreme values fundamental frequency
points(c(ffreq[c(which.max(ffreq[,2]),which.min(ffreq[,2])),1]) + mar1, c(ffreq[c(which.max(ffreq[,2]),
which.min(ffreq[,2])),2]), col = col[3], cex = cex[1] * 1.6, pch = pch[1], lwd = 2)
# Plot all fundamental frequency values
if(type %in% c("p", "b"))
points(c(ffreq[,1])+mar1, c(ffreq[,2]), col = col[1], cex = cex[1], pch = pch[1], bg = col[1])
# plot lines
if(type %in% c("l", "b"))
lines(ffreq[,1] + mar1, ffreq[,2], col = col[1], lwd = 3)
# Plot empty points at the bottom for the bins that did not detected any frequencies or out of bp
if(nrow(ffreq1) > nrow(ffreq))
points(c(ffreq1[!ffreq1[,1] %in% ffreq[,1], 1]) + mar1, rep(fl[1] + (fl[2] - fl[1]) * 0.04, nrow(ffreq1) - nrow(ffreq)), col = col[4], cex = cex[1] * 0.7, pch = pch[1])
}
if(contour %in% c("both", "df") & is.null(custom.contour))
dfreq1 <- seewave::dfreq(r, f = f, wl = wl, ovlp = 70, plot = FALSE, bandpass = b * 1000, fftw = TRUE,
threshold = threshold.time, tlim = c(mar1, mar2))
dfreq <- matrix(dfreq1[!is.na(dfreq1[,2]),], ncol = 2)
if(nrow(dfreq > 2) & !is.null(freq.continuity))
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
indx
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which((nrow(dfreq)-2):(nrow(dfreq)-1)):nrow(dfreq)] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1):nrow(dfreq)])] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]):nrow(dfreq)] <- FALSE
source('~/Dropbox/warbleR/R/trackfreqs.R')
trackfreqs(X = fr.ad[1,], wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
trackfreqs(X = fr.ad[1,], wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
for(i in 1:23)
trackfreqs(X = fr.ad[i,], wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
i
trackfreqs(X = fr.ad[10,], wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
r <- tuneR::readWave(as.character(X$sound.files[i]), header = TRUE)
f <- r$sample.rate
t <- c(X$start[i] - mar, X$end[i] + mar)
mar1 <- mar
if(t[1] < 0) {
t[1] <- 0
mar1 <- X$start[i]
}
mar2 <- mar1 + X$end[i] - X$start[i]
if(t[2] > r$samples/f) t[2] <- r$samples/f
r <- tuneR::readWave(as.character(X$sound.files[i]), from = t[1], to = t[2], units = "seconds")
if(bp[1] == "frange") bp <- c(X$low.freq[i], X$high.freq[i])
b <- bp
if(b[2] > ceiling(r@samp.rate/2000) - 1) b[2] <- ceiling(r@samp.rate/2000) - 1
fl<- flim #in case flim its higher than can be due to sampling rate
if(fl[2] > ceiling(f/2000) - 1) fl[2] <- ceiling(f/2000) - 1
if(propwidth)
pwc <- (10.16) * ((t[2]-t[1])/0.27) * xl * picsize else pwc <- (10.16) * xl * picsize
imgfun(filename = paste0(X$sound.files[i],"-", X$selec[i], "-", img.suffix2),
width = pwc, height = (10.16) * picsize, units = "cm", res = res)
if(osci == TRUE) hts <- c(3, 2) else hts <- NULL
if(sc == TRUE) wts <- c(3, 1) else wts <- NULL
par(mar = inner.mar)
par(oma = outer.mar)
rect(xleft = 0, ybottom = b[1], xright = length(r@left)/f, ytop = b[2], col = adjustcolor("green3", 0.1), border = adjustcolor("gray", 0.2))
abline(h = b, col = "#80C3FF", lty = 3, lwd = 2)
mtext(side = 1, text = "Time (s)", line = 2.3)
mtext(side = 2, text = "Frequency (kHz)", line = 2.3)
dfreq1 <- seewave::dfreq(r, f = f, wl = wl, ovlp = 70, plot = FALSE, bandpass = b * 1000, fftw = TRUE,
threshold = threshold.time, tlim = c(mar1, mar2))
dfreq <- matrix(dfreq1[!is.na(dfreq1[,2]),], ncol = 2)
if(nrow(dfreq > 2) & !is.null(freq.continuity))
{
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]):nrow(dfreq)] <- FALSE
dfreq <- dfreq[indx, ]
}
dfreq
points(c(dfreq[c(which.max(dfreq[,2]),which.min(dfreq[,2])),1])+mar1, c(dfreq[c(which.max(dfreq[,2]),
which.min(dfreq[,2])),2]), col = col[3], cex = cex[1] * 1.6, pch = pch[2], lwd = 2)
i
dfreq[,2]
points(c(dfreq[c(which.max(dfreq[,2]),which.min(dfreq[,2])),1])+mar1, c(dfreq[c(which.max(dfreq[,2]),
which.min(dfreq[,2])),2]), col = col[3], cex = cex[1] * 1.6, pch = pch[2], lwd = 2)
dfreq
source('~/Dropbox/warbleR/R/trackfreqs.R')
trackfreqs(X = fr.ad[10,], wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
X = fr.ad
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
source('~/Dropbox/warbleR/R/trackfreqs.R')
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
indx
dfreq <- dfreq[indx, ]
dfreq1 <- seewave::dfreq(r, f = f, wl = wl, ovlp = 70, plot = FALSE, bandpass = b * 1000, fftw = TRUE,
threshold = threshold.time, tlim = c(mar1, mar2))
dfreq <- matrix(dfreq1[!is.na(dfreq1[,2]),], ncol = 2)
if(nrow(dfreq > 2) & !is.null(freq.continuity))
{
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]):nrow(dfreq)] <- FALSE
dfreq <- dfreq[indx, ]
}
dfreq
points(c(dfreq[c(which.max(dfreq[,2]),which.min(dfreq[,2])),1])+mar1, c(dfreq[c(which.max(dfreq[,2]),
which.min(dfreq[,2])),2]), col = col[3], cex = cex[1] * 1.6, pch = pch[2], lwd = 2)
if(type %in% c("p", "b"))
points(dfreq[,1] + mar1, dfreq[,2], col = col[2], cex = cex[1], pch = pch[2], bg = col[2])
points(dfreq[,1] + mar1, dfreq[,2], col = col[2], cex = cex[1], pch = pch[2], bg = col[2])
lines(dfreq[,1] + mar1, dfreq[,2], col = col[2], lwd = 3)
points(c(dfreq1[!dfreq1[,1] %in% dfreq[,1], 1]) + mar1, rep(fl[1] + (fl[2] - fl[1]) * 0.02, nrow(dfreq1) - nrow(dfreq)), col = col[4], cex = cex[1] * 0.7, pch = pch[2])
wl = 200
flim = c(2, 12)
bp = "frange"
pal = monitoR::gray.3
fast.spec = TRUE
contour = "df"
ovlp = 90
pb = FALSE
threshold = 10
line = F
freq.continuity = 0.2
#check path to working directory
if(!is.null(path))
{wd <- getwd()
if(class(try(setwd(path), silent = TRUE)) == "try-error") stop("'path' provided does not exist") else
setwd(path)} #set working directory
#if X is not a data frame
if(!class(X) == "data.frame") stop("X is not a data frame")
if(!all(c("sound.files", "selec",
"start", "end") %in% colnames(X)))
stop(paste(paste(c("sound.files", "selec", "start", "end")[!(c("sound.files", "selec",
"start", "end") %in% colnames(X))], collapse=", "), "column(s) not found in data frame"))
#if there are NAs in start or end stop
if(any(is.na(c(X$end, X$start)))) stop("NAs found in start and/or end")
#if end or start are not numeric stop
if(all(class(X$end) != "numeric" & class(X$start) != "numeric")) stop("'end' and 'selec' must be numeric")
#if any start higher than end stop
if(any(X$end - X$start<0)) stop(paste("The start is higher than the end in", length(which(X$end - X$start<0)), "case(s)"))
#if any selections longer than 20 secs stop
if(any(X$end - X$start>20)) stop(paste(length(which(X$end - X$start>20)), "selection(s) longer than 20 sec"))
# bp checking
if(bp[1] != "frange")
{if(!is.vector(bp)) stop("'bp' must be a numeric vector of length 2") else{
if(!length(bp) == 2) stop("'bp' must be a numeric vector of length 2")}
} else
{if(!any(names(X) == "low.freq") & !any(names(X) == "high.freq")) stop("'bp' = frange requires low.freq and high.freq columns in X")
if(any(is.na(c(X$low.freq, X$high.freq)))) stop("NAs found in low.freq and/or high.freq")
if(any(c(X$low.freq, X$high.freq) < 0)) stop("Negative values found in low.freq and/or high.freq")
if(any(X$high.freq - X$low.freq < 0)) stop("high.freq should be higher than low.f")
}
#if it argument is not "jpeg" or "tiff"
if(!any(it == "jpeg", it == "tiff")) stop(paste("Image type", it, "not allowed"))
#if ff.method argument
if(!any(ff.method == "seewave", ff.method == "tuneR")) stop(paste("ff.method", ff.method, "is not recognized"))
#wrap img creating function
if(it == "jpeg") imgfun <- jpeg else imgfun <- tiff
#if type not l b or p
if(!any(type %in% c("p", "l", "b"))) stop(paste("Type", type, "not allowed"))
# if frange.detec oscillo false
if(frange.detec) osc <- FALSE
#join img.suffix and it
if(is.null(img.suffix))
img.suffix2 <- paste("trackfreqs", it, sep = ".") else   img.suffix2 <- paste(img.suffix, it, sep = ".")
# threshold adjustment
if(is.null(threshold.time)) threshold.time <- threshold
if(is.null(threshold.freq)) threshold.freq <- threshold
#return warning if not all sound files were found
recs.wd <- list.files(pattern = "\\.wav$", ignore.case = TRUE)
if(length(unique(X$sound.files[(X$sound.files %in% recs.wd)])) != length(unique(X$sound.files)))
message(paste(length(unique(X$sound.files))-length(unique(X$sound.files[(X$sound.files %in% recs.wd)])),
".wav file(s) not found"))
#count number of sound files in working directory and if 0 stop
d <- which(X$sound.files %in% recs.wd)
if(length(d) == 0){
stop("The .wav files are not in the working directory")
}  else X <- X[d, ]
# If parallel is not numeric
if(!is.numeric(parallel)) stop("'parallel' must be a numeric vector of length 1")
if(any(!(parallel %% 1 == 0),parallel < 1)) stop("'parallel' should be a positive integer")
# Compare custom.contour to X
if(!is.null(custom.contour)){
#check if sound.files and selec columns are present and in the right order
if(!identical(names(custom.contour)[1:2], c("sound.files", "selec"))) stop("'sound.files' and/or 'selec' columns are not found in custom.contour")
#check if the info in sound.files and selec columns is the same for X and custom.contour
#remove custom.contour selections not in X
custom.contour <- custom.contour[paste(custom.contour[,c("sound.files")], custom.contour[,c("selec")]) %in% paste(X[,c("sound.files")], X[,c("selec")])]
#stop if not the same number of selections
if(nrow(X) > nrow(custom.contour)) stop("selection(s) in X but not in custom.contour")
#order custom.contour as in X
custom.contour <- custom.contour[match(paste(custom.contour[,c("sound.files")], custom.contour[,c("selec")]), paste(X[,c("sound.files")], X[,c("selec")])),]
# frange.detec <- FALSE
}
# adjust if only 1 pch was specfified
if(length(pch) == 1) pch <- c(pch, pch)
# adjust if only 1 color was specified
if(length(col) == 1) col <- c(col, col)
# adjust if only 1 leglab was specified
if(length(leglab) == 1) leglab <- c(leglab, leglab)
#make colors transparent
col <- adjustcolor(c(col, "yellow", "black", "white", "red"), alpha.f = col.alpha)
r <- tuneR::readWave(as.character(X$sound.files[i]), header = TRUE)
f <- r$sample.rate
t <- c(X$start[i] - mar, X$end[i] + mar)
mar1 <- mar
if(t[1] < 0) {
t[1] <- 0
mar1 <- X$start[i]
}
mar2 <- mar1 + X$end[i] - X$start[i]
if(t[2] > r$samples/f) t[2] <- r$samples/f
r <- tuneR::readWave(as.character(X$sound.files[i]), from = t[1], to = t[2], units = "seconds")
if(bp[1] == "frange") bp <- c(X$low.freq[i], X$high.freq[i])
b <- bp
if(b[2] > ceiling(r@samp.rate/2000) - 1) b[2] <- ceiling(r@samp.rate/2000) - 1
fl<- flim #in case flim its higher than can be due to sampling rate
if(fl[2] > ceiling(f/2000) - 1) fl[2] <- ceiling(f/2000) - 1
if(propwidth)
pwc <- (10.16) * ((t[2]-t[1])/0.27) * xl * picsize else pwc <- (10.16) * xl * picsize
if(osci == TRUE) hts <- c(3, 2) else hts <- NULL
if(sc == TRUE) wts <- c(3, 1) else wts <- NULL
par(mar = inner.mar)
par(oma = outer.mar)
if(!all(is.na(frng$frange))) b <- as.numeric(frng$frange)
dfreq1 <- seewave::dfreq(r, f = f, wl = wl, ovlp = 70, plot = FALSE, bandpass = b * 1000, fftw = TRUE,
threshold = threshold.time, tlim = c(mar1, mar2))
dfreq <- matrix(dfreq1[!is.na(dfreq1[,2]),], ncol = 2)
if(nrow(dfreq > 2) & !is.null(freq.continuity))
{
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]):nrow(dfreq)] <- FALSE
dfreq <- dfreq[indx, ]
}
points(c(dfreq[c(which.max(dfreq[,2]),which.min(dfreq[,2])),1])+mar1, c(dfreq[c(which.max(dfreq[,2]),
which.min(dfreq[,2])),2]), col = col[3], cex = cex[1] * 1.6, pch = pch[2], lwd = 2)
dfreq
dfreq <- as.matrix(dfreq, ncol = 2)
dfreq
dfreq <- as.matrix(dfreq, nrow = 2)
dfreq
dfreq1 <- seewave::dfreq(r, f = f, wl = wl, ovlp = 70, plot = FALSE, bandpass = b * 1000, fftw = TRUE,
threshold = threshold.time, tlim = c(mar1, mar2))
dfreq <- matrix(dfreq1[!is.na(dfreq1[,2]),], ncol = 2)
dfreq
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
indx
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
indx
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]):nrow(dfreq)] <- FALSE
indx
any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])
indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
indx
which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[(nrow(dfreq) - which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])):nrow(dfreq)] <- FALSE
indx
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
if(nrow(dfreq) > 10 & any(!indx[2:3])) indx[1:(which(!indx[2:3]))] <- FALSE
if(nrow(dfreq) > 10 & any(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])) indx[(1- nrow(dfreq) - which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)])):nrow(dfreq)] <- FALSE
(nrow(dfreq) - which(!indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]))
nrow(dfreq)
indx <- sapply(1:nrow(dfreq), function(x)
{
# if first one
if(x == 1)
{if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x + 1, 2] - dfreq[x + 2, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else {
# if last one
if(x == nrow(dfreq))
{
if(abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity & abs(dfreq[x - 2, 2] - dfreq[x - 1, 2]) < freq.continuity) return(FALSE) else return(TRUE)
} else
{
if(abs(dfreq[x, 2] - dfreq[x + 1, 2]) > freq.continuity & abs(dfreq[x, 2] - dfreq[x - 1, 2]) > freq.continuity) return(FALSE) else return(TRUE)
}
}
})
indx
indx[(nrow(dfreq)-2):(nrow(dfreq)-1)]
indx[nrow(dfreq):1]
source('~/Dropbox/warbleR/R/trackfreqs.R')
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
i = 16
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.1)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.3)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.4)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.5)
source('~/Dropbox/warbleR/R/trackfreqs.R')
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.5, clip.edges = 5)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.5, clip.edges = 10)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2, clip.edges = 10)
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 10, line = F, freq.continuity = 0.2, clip.edges = 10, type = "l")
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 15, line = F, freq.continuity = 0.2, clip.edges = 10, type = "l")
trackfreqs(X = fr.ad, wl = 200, flim = c(2, 12), bp = "frange", pal = monitoR::gray.3, fast.spec = TRUE, contour = "df", ovlp = 90, pb = FALSE, threshold = 15, line = F, freq.continuity = 0.2, clip.edges = 2, type = "l")
