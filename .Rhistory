remove.packages("warbleR")
rm(list = ls())
devtools::install_github("maRce10/warbleR")
library(warbleR)
# number of harmonics
hrms <- 4
# amplitude values for each harmonic
amps <- c(0.2, 0.1, 0.1, 1)
# sampling rate
sr <- 22.05
##### spectrogram parameters #####
# color palette
pal <- reverse.topo.colors
# set collevels
cl <- seq(-27, 0, 1)
# windows length
wl <- 600
# time window overlap
ovlp <- 90
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = harms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = seq(-20, 0, 1), wl = wl, osc = F,
main = "seewave's dfreq function", flim = flim, main = "song part 1")
# song 2
sm_sng_p2 <- ssim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = harms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flim)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = seq(-20, 0, 1), wl = wl, osc = F,
main = "seewave's dfreq function", flim = flim, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flim)
# number of harmonics
hrms <- 4
# amplitude values for each harmonic
amps <- c(0.2, 0.1, 0.1, 1)
# sampling rate
sr <- 22.05
##### spectrogram parameters #####
# color palette
pal <- reverse.topo.colors
# set collevels
cl <- seq(-27, 0, 1)
# windows length
wl <- 600
# time window overlap
ovlp <- 90
# frequency limits
flm <- c(1, 12)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = seq(-20, 0, 1), wl = wl, osc = F,
main = "seewave's dfreq function", flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = seq(-20, 0, 1), wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
# number of harmonics
hrms <- 4
# amplitude values for each harmonic
amps <- c(0.2, 0.1, 0.1, 1)
# sampling rate
sr <- 22.05
##### spectrogram parameters #####
# color palette
pal <- reverse.topo.colors
# set collevels
cl <- seq(-27, 0, 1)
# windows length
wl <- 600
# time window overlap
ovlp <- 90
# frequency limits
flm <- c(1, 11)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = seq(-20, 0, 1), wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flim, main = "'Jumping' dominant frequency song")
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
# number of harmonics
hrms <- 4
# amplitude values for each harmonic
amps <- c(0.2, 0.1, 0.1, 1)
# sampling rate
sr <- 22.05
##### spectrogram parameters #####
# color palette
pal <- reverse.topo.colors
# set collevels
cl <- seq(-23, 0, 1)
# windows length
wl <- 600
# time window overlap
ovlp <- 90
# frequency limits
flm <- c(1, 11)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = seq(-20, 0, 1), wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
# number of harmonics
hrms <- 4
# amplitude values for each harmonic
amps <- c(0.2, 0.1, 0.1, 1)
# sampling rate
sr <- 22.05
##### spectrogram parameters #####
# color palette
pal <- reverse.topo.colors
# set collevels
cl <- seq(-21, 0, 1)
# windows length
wl <- 600
# time window overlap
ovlp <- 90
# frequency limits
flm <- c(1, 11)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
# number of harmonics
hrms <- 4
# amplitude values for each harmonic
amps <- c(0.2, 0.1, 0.1, 1)
# sampling rate
sr <- 22.05
##### spectrogram parameters #####
# color palette
pal <- reverse.topo.colors
# set collevels
cl <- seq(-24, 0, 1)
# windows length
wl <- 600
# time window overlap
ovlp <- 90
# frequency limits
flm <- c(1, 11)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
#band pass
bp <- c(2000, 9000)
# seewave's dominant frequency tracking
dm_frq <- dfreq(wave = sm_sng, tlim = c(0.1, 0.6), wl = wl, ovlp = ovlp, threshold = threshold, plot = F, bandpass =bandpass)
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl, wl = wl, osc = F, flim = c(0,10), main = "seewave's dfreq frequency contour")
points(x = dm_frq[ , 1] + 0.1, y =  dm_frq[ , 2], cex = 1, col = adjustcolor("red2", 0.3), pch = 20)
#band pass
bp <- c(2000, 9000)
# threshold for amplitude detection
thrshld <- 20
# seewave's dominant frequency tracking
dm_frq <- dfreq(wave = sm_sng, tlim = c(0.1, 0.6), wl = wl, ovlp = ovlp, threshold = thrshld, plot = F, bandpass =bandpass)
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl, wl = wl, osc = F, flim = c(0,10), main = "seewave's dfreq frequency contour")
points(x = dm_frq[ , 1] + 0.1, y =  dm_frq[ , 2], cex = 1, col = adjustcolor("red2", 0.3), pch = 20)
#band pass
bp <- c(2000, 9000)
# threshold for amplitude detection
thrshld <- 20
# seewave's dominant frequency tracking
dm_frq <- dfreq(wave = sm_sng, tlim = c(0.1, 0.6), wl = wl, ovlp = ovlp, threshold = thrshld, plot = F, bandpass =bp)
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl, wl = wl, osc = F, flim = c(0,10), main = "seewave's dfreq frequency contour")
points(x = dm_frq[ , 1] + 0.1, y =  dm_frq[ , 2], cex = 1, col = adjustcolor("red2", 0.3), pch = 20)
trck_hrm <- track_harm(wave = sm_sng, tlim = c(0.1, 0.6), wl = wl, ovlp = ovlp, threshold = thrshld, plot = F, bandpass = bp)
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = seq(-27, 0, 1),wl = wl, osc = F, flim = c(0,10), main = "warbleR harmonic tracker function")
points(x = trck_hrm[ , 1] + 0.1, y =  trck_hrm[ , 2], cex = 1, col = adjustcolor("red2", 0.3), pch = 20)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
wdX <- getwd()
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
setwd(wdX)
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
wdX <- getwd()
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
setwd(wdX)
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr, bgn = 0.6,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr, bgn = 0.8,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr, bgn = 1,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr, bgn = 0.1,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr, bgn = 1,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr, bgn = 0.3,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr, bgn = 1,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
#song 1
sm_sng_p1 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0.1, 0), samp.rate = sr, bgn = 0.25,
freq = 4, harms = hrms, amps = amps, seed = 4, diff_fun = "BB")
spectro(sm_sng_p1, grid = F, scale = F, ovlp = ovlp, palette = pal,
collevels = cl, wl = wl, osc = F,
flim = flm, main = "song part 1")
# song 2
sm_sng_p2 <- sim_songs(steps = 4, durs = 0.25, gaps = c(0, 0.1), samp.rate = sr, bgn = 0.9,
freq = 4, harms = hrms, amps = rev(amps), seed = 4, diff_fun = "BB")
spectro(sm_sng_p2, grid = F, scale = F,  ovlp = ovlp, palette = pal, collevels = cl, wl = wl,
osc = F,  main = "song part 2", flim = flm)
sm_sng <- pastew(sm_sng_p2, sm_sng_p1, output = "Wave")
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl,
wl = wl, osc = F, flim = flm, main = "'Jumping' dominant frequency song")
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
trck_hrm <- track_harm(wave = sm_sng, tlim = c(0.1, 0.6), wl = wl, ovlp = ovlp, threshold = thrshld, plot = F, bandpass = bp)
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl, wl = wl, osc = F, flim = c(0,10), main = "warbleR harmonic tracker function")
points(x = trck_hrm[ , 1] + 0.1, y =  trck_hrm[ , 2], cex = 1, col = adjustcolor("red2", 0.3), pch = 20)
#band pass
bp <- c(2000, 9000)
# threshold for amplitude detection
thrshld <- 10
# seewave's dominant frequency tracking
dm_frq <- dfreq(wave = sm_sng, tlim = c(0.1, 0.6), wl = wl, ovlp = ovlp, threshold = thrshld, plot = F, bandpass = bp)
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl, wl = wl, osc = F, flim = c(0,10), main = "seewave's dfreq frequency contour")
points(x = dm_frq[ , 1] + 0.1, y =  dm_frq[ , 2], cex = 1, col = adjustcolor("red2", 0.3), pch = 20)
trck_hrm <- track_harm(wave = sm_sng, tlim = c(0.1, 0.6), wl = wl, ovlp = ovlp, threshold = thrshld, plot = F, bandpass = bp)
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl, wl = wl, osc = F, flim = c(0,10), main = "warbleR harmonic tracker function")
points(x = trck_hrm[ , 1] + 0.1, y =  trck_hrm[ , 2], cex = 1, col = adjustcolor("red2", 0.3), pch = 20)
trck_hrm <- track_harm(wave = sm_sng, tlim = c(0.1, 0.6), wl = wl, ovlp = ovlp, threshold = thrshld, plot = F, bandpass = bp)
spectro(sm_sng, grid = F, scale = F, f = f, ovlp = ovlp, palette = pal, collevels = cl, wl = wl, osc = F, flim = c(0,10), main = "warbleR harmonic tracker function")
points(x = trck_hrm[ , 1] + 0.1, y =  trck_hrm[ , 2], cex = 1, col = "red2", pch = 20)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Tracking frequency countours when dominant frequency jumps across harmonics.Rmd", rm.output.text = F)
