#
#       b2 <-  grep("{% endhighlight %}", x, fixed = T)
#     for(i in 1:length(b2))
#     {
#       #add after
#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
setwd("~/Downloads/")
library(warbleR)
setwd(tempdir())
data(list = c("Phae.long1", "Phae.long2"))
writeWave(Phae.long1,"Phae.long1.wav")
writeWave(Phae.long2,"Phae.long2.wav")
lspec(sxrow = 2, rows = 8, pal = reverse.heat.colors, wl = 300, it = "jpeg")
lspec2pdf(keep.jpeg = FALSE)
getwd()
recs <- querxc(qword = 'rec:"Marcelo Araya-Salas"', download = FALSE)
names(recs)
rec1 <- querxc(qword = 'nr:153989', download = FALSE)
rec1
setwd(tempdir())
rec2 <- querxc(qword = 'nr:154190', download = TRUE)
rec1 <- querxc(qword = 'nr:153989', download = TRUE)
list.files()
mp32wav()
list.files()
lspec(flim = c(0, 6), pal = reverse.heat.colors, wl = 200, it = "jpeg")
lspec2pdf(keep.jpeg = FALSE)
setwd(tempdir())
mp32wav()
mp32wav(to.path = tempdir())
tempdir()
mp32wav(to.path = tempdir())
mp32wav()
mp32wav()
mp32wav(to.path = "/tmp/RtmpPHllpI")
to.path = "/tmp/RtmpPHllpI"
samp.rate = 44.1
parallel = 1
from.path = NULL
to.path = NULL
normalize = NULL
pb = TRUE
if(!is.null(to.path))
{if(class(try(setwd(from.path), silent = TRUE)) == "try-error") stop("'path' provided does not exist")} else
from.path <- getwd() #set working directory
source('~/Dropbox/warbleR/R/mp32wav.R')
mp32wav(to.path = "/tmp/RtmpPHllpI")
mp32wav(to.path = "/tmp/RtmpPHllpI", from.path = "/tmp/RtmpPHllpI")
if(!is.null(from.path))
{if(class(try(setwd(from.path), silent = TRUE)) == "try-error") stop("'path' provided does not exist")} else
from.path <- getwd() #set working directory
if(!is.null(to.path))
{if(class(try(setwd(to.path), silent = TRUE)) == "try-error") stop("'path' provided does not exist")} else
to.path <- getwd() #set working directory
getwd()
#normalize
if(!is.null(normalize))
{if(length(normalize) >1) stop("'normalize' should have a single value")
if(!normalize %in% c("1", "8", "16", "24", "32", "64", "0")) stop("'normalize' value not allowed (check the documentation from the normalize function in the tuneR package")
}
if(samp.rate > 44.1) samp.rate <- 44.1
#if parallel is not numeric
if(!is.numeric(parallel)) stop("'parallel' must be a numeric vector of length 1")
if(any(!(parallel %% 1 == 0),parallel < 1)) stop("'parallel' should be a positive integer")
#parallel not available on windows
if(parallel > 1 & Sys.info()[1] == "Windows")
{message("parallel computing not availabe in Windows OS for this function")
parallel <- 1}
if(parallel > 1)
lapp <- function(X, FUN) parallel::mclapply(X, FUN, mc.cores = parallel) else
{if(pb) lapp <- pbapply::pblapply else lapp <- lapply}
files <- list.files(path=getwd(), pattern = ".mp3$", ignore.case = TRUE) #list .mp3 files in working directory
if(length(files) == 0) stop("no 'mp3' files in working directory")
wavs <- list.files(pattern = "\\.wav$", ignore.case = TRUE)
files <- files[!substr(files, 0, nchar(files) - 4) %in% substr(wavs, 0, nchar(wavs) - 4)]
if(length(files) == 0) stop("all 'mp3' files have been converted")
message("Start writing wav files:")
from.path
if(!is.null(normalize))
suppressWarnings( a<-lapp(files, function(x) tuneR::writeWave(object = tuneR::normalize(tuneR::downsample(tuneR::readMP3(filename =  x), samp.rate = samp.rate * 1000), unit = normalize), filename = file.path(from.path, substr(x, 0, nchar(x) - 4), ".wav")))) else
suppressWarnings( a<-lapp(files, function(x) tuneR::writeWave(object = tuneR::downsample(tuneR::readMP3(filename =  x), samp.rate = samp.rate * 1000), filename = file.path(from.path, substr(x, 0, nchar(x) - 4), ".wav"))))
lapp
a<-lapp(files, function(x) tuneR::writeWave(object = tuneR::downsample(tuneR::readMP3(filename =  x), samp.rate = samp.rate * 1000), filename = file.path(from.path, substr(x, 0, nchar(x) - 4), ".wav")))
files
x = files[1]
a<-lapp(files, function(x) tuneR::writeWave(object = tuneR::readMP3(filename =  x), filename = file.path(from.path, substr(x, 0, nchar(x) - 4), ".wav"))
)
from.path
a<-lapp(files, function(x) tuneR::writeWave(object = tuneR::readMP3(filename =  x), filename = file.path(from.path, paste0(substr(x, 0, nchar(x) - 4), ".wav"))))
source('~/Dropbox/warbleR/R/mp32wav.R')
mp32wav(to.path = "/tmp/RtmpPHllpI", from.path = "/tmp/RtmpPHllpI")
mp32wav(to.path = "/tmp/RtmpPHllpI", from.path = "/tmp/RtmpPHllpI")
mp32wav(to.path = "/tmp/RtmpPHllpI", from.path = "/tmp/RtmpPHllpI", pb = F)
mp32wav(to.path = "/tmp/RtmpPHllpI", from.path = "/tmp/RtmpPHllpI", pb = F, normalize = 16)
mp32wav(to.path = "/tmp/RtmpPHllpI", from.path = "/tmp/RtmpPHllpI", pb = F, normalize = "16")
names(recs)
lspec(flim = c(0, 6), pal = reverse.heat.colors, wl = 200, it = "jpeg")
lspec2pdf(keep.jpeg = TRUE)
lspec2pdf(keep.jpeg = FALSE, overwrite = T)
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#     if(rm.output.text)
#    {
#     #determine start and end of output chuncks
#     a1 <-   grep("{% highlight text %}", x, fixed = T)
#     a2 <- numeric(length = length(a1))
#     A <- list()
#     for(i in 1:length(a1)) {
#       z <- grep("{% endhighlight %}", x, fixed = T)
#     a2[i] <- z[z > a1[i]][1]
#     A[[i]] <- a1[i]:a2[i]
#     }
#
#     A <- unlist(A)
#     x <- x[-A]
#       }
#
#     #add categories and tags
#     if(tags.eq.cats)
#       tags <- categories
#
#        dl2 <- grep("date:", x)
#     x <- c(x[1:dl2], paste("categories:", categories), x[(dl2 + 1):length(x)])
#     x <- c(x[1:(dl2 + 1)], paste("tags:", tags), x[(dl2 + 2):length(x)])
#
#
#     #add space before and after chuncks
#       #determine start and end of chuncks
#           b1 <-  grep("{% highlight r %}", x, fixed = T)
#     for(i in 1:length(b1))
#     {
#       #add before
#       pos <- grep("{% highlight r %}", x, fixed = T)[i]
#       # if(x[pos - 1] != "")
#         x <- c(x[1:(pos - 1)], "<br>", x[pos:length(x)])
#     }
#
#       b2 <-  grep("{% endhighlight %}", x, fixed = T)
#     for(i in 1:length(b2))
#     {
#       #add after
#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Generate pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
unlink(list.files("mp3|jpeg|pdf"))
unlink(list.files("mp3|jpeg|pdf", path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/"))
unlink(list.files("\\.mp3|\\.jpeg|\\.pdf", path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/"))
unlink(list.files("\\.mp3$|\\.jpeg$|\\.pdf$", path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/"))
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
unlink(list.files("\\.mp3$|\\.jpeg$|\\.pdf$"))
unlink(list.files("\\.mp3$|\\.jpeg$|\\.pdf$", path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/"))
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Download a single recording for each species in a site from Xeno-Canto.Rmd", categories = "querxc", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
unlink(list.files("\\.mp3$|\\.jpeg$|\\.pdf$", path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/"))
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
#create pdf lspec
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
rec1 <- querxc(qword = 'nr:153989', download = TRUE)
rec2 <- querxc(qword = 'nr:154190', download = TRUE)
mp32wav()
lspec(flim = c(0, 6), sxrow = 10, pal = reverse.heat.colors, wl = 200, it = "jpeg")
lspec2pdf(keep.jpeg = FALSE)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Create pdf files with spectrograms of full recordings.Rmd", categories = "spectrograms", rm.output.text = F)
remove.packages("warbleR")
devtools::install_github("maRce10/warbleR")
require("warbleR")
?compare.methods
setwd(tempdir())
data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
writeWave(Phae.long1,"Phae.long1.wav")
writeWave(Phae.long2,"Phae.long2.wav")
writeWave(Phae.long3,"Phae.long3.wav")
writeWave(Phae.long4,"Phae.long4.wav")
compare.methods(X = selec.table, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("XCORR", "dfDTW"), parallel = 1, it = "jpeg", pb =  FALSE)
```
setwd()
getwd()
#function modified from http://brooksandrew.github.io/simpleblog/articles/blogging-with-r-markdown-and-jekyll-using-knitr/
KnitPost <- function(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file = NULL, categories = NULL , tags = NULL, tags.eq.cats = TRUE, rm.output.text = FALSE) {
if(!'package:knitr' %in% search()) library('knitr')
if(is.null(rmd.file)) stop("need to provide rmd.file biatch!")
## Blog-specific directories.  This will depend on how you organize your blog.
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll()
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='png', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F, dpi = 70)
setwd(rmd.path) # setwd to base
corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = rmd.file)))
#knitr!!
out.file <- knit(as.character(rmd.file),
output = as.character(corresponding.md.file),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", rmd.file))
#fix heading to jekyll format
#add layout post
x <- readLines(corresponding.md.file)
x <- c(x[1], "layout: post", x[2:length(x)])
#fix date format
dl <- grep("date:", x)
dln <- x[dl]
dln <- gsub("date:","", dln)
y <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 1)
y <- gsub(" ","", y)
m <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 2)
m <- gsub(" ","", m)
d <- sapply(strsplit(as.character(dln), "-",fixed=T), "[[", 3)
d <- gsub(" ","", d)
dln <- paste(d, m, y, sep = "-")
dln <- gsub('"',"", dln)
dln <- gsub(' ',"", dln)
x[dl] <- paste("date:", dln)
#remove output:
x <- x[-grep("output:", x)]
#remove md_document:
x <- x[-grep("md_document:", x)]
#remove variant: markdown_github
x <- x[-grep("variant: markdown_github", x)]
#remove output:
x <- x[-grep("author:", x)]
#     if(rm.output.text)
#    {
#     #determine start and end of output chuncks
#     a1 <-   grep("{% highlight text %}", x, fixed = T)
#     a2 <- numeric(length = length(a1))
#     A <- list()
#     for(i in 1:length(a1)) {
#       z <- grep("{% endhighlight %}", x, fixed = T)
#     a2[i] <- z[z > a1[i]][1]
#     A[[i]] <- a1[i]:a2[i]
#     }
#
#     A <- unlist(A)
#     x <- x[-A]
#       }
#
#     #add categories and tags
#     if(tags.eq.cats)
#       tags <- categories
#
#        dl2 <- grep("date:", x)
#     x <- c(x[1:dl2], paste("categories:", categories), x[(dl2 + 1):length(x)])
#     x <- c(x[1:(dl2 + 1)], paste("tags:", tags), x[(dl2 + 2):length(x)])
#
#
#     #add space before and after chuncks
#       #determine start and end of chuncks
#           b1 <-  grep("{% highlight r %}", x, fixed = T)
#     for(i in 1:length(b1))
#     {
#       #add before
#       pos <- grep("{% highlight r %}", x, fixed = T)[i]
#       # if(x[pos - 1] != "")
#         x <- c(x[1:(pos - 1)], "<br>", x[pos:length(x)])
#     }
#
#       b2 <-  grep("{% endhighlight %}", x, fixed = T)
#     for(i in 1:length(b2))
#     {
#       #add after
#       pos <- grep("{% endhighlight %}", x, fixed = T)[i]
#         x <- c(x[1:pos], "<br>", x[(pos + 1):length(x)])
#        }
#
#   #make all the empty lines a break
#   x[x == ""] <- "<br>"
#
#   rmls <- list()
#
#   for(i in 2:length(x)) if(x[i] == "<br>" & x[i] == x[i - 1])  rmls[[length(rmls) + 1]] <- i
#
#   x <- x[-unlist(rmls)]
#
#
# #remove the ones within chuncks
#     b1 <-  grep("{% highlight r %}", x, fixed = T)
#     b2 <-  grep("{% endhighlight %}", x, fixed = T)
#
#   rmchnk <- list()
#     for(i in 1:length(b1))
#       rmchnk[[length(rmchnk) + 1]] <- c(b1[i]:b2[b2 > b1[i]][1])
#
#   xchnk <- x[unlist(rmchnk)]
#   xchnk[xchnk == "<br>"] <- ""
#   x[unlist(rmchnk)] <-  xchnk
#remove highlight code in chunck header
# x <- gsub("{% highlight r %}|{% highlight text %}", "``` r", x, fixed = T)
# x <- gsub("{% endhighlight %}", "```", x, fixed = T)
#
# x[x == "{% highlight r %}"] <- "``` r"
# x[x == "{% highlight text %}"] <- "``` r"
# x[x == "{% endhighlight %}"] <- "```"
#
#put it together as a file
cat(x, file = corresponding.md.file, sep="\n")
#change name to include date
nn <- paste(y, m , d, basename(corresponding.md.file), sep = "-")
nn <- gsub('"',"", nn)
#replace spaces with _
nn <- gsub(" ","_", nn)
file.rename(from = corresponding.md.file, to = file.path(posts.path, nn))
unlink(list.files(path = "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/", pattern = "\\.wav$"))
}
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
sp <- specan(selec.table, bp = c(0, 10))
getwd()
setwd(tempdir())
sp <- specan(selec.table, bp = c(0, 10))
st2 <- rbind(selec.table, selec.table, selec.table)
st2$selec <- 1:nrow(st2)
compare.methods(X = st2, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("XCORR", "SP"), parallel = 1, it = "jpeg")
compare.methods(X = selec.table, flim = c(0, 10), sp = sp, bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("XCORR", "SP"), parallel = 1, it = "jpeg")
sp <- sp[, 1:7]
compare.methods(X = selec.table, flim = c(0, 10), sp = sp, bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("XCORR", "SP"), parallel = 1, it = "jpeg")
compare.methods(X = selec.table, flim = c(0, 10), sp = sp, bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("dfDTW", "SP"), parallel = 1, it = "jpeg")
compare.methods(X = st2, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("XCORR", "SP"), parallel = 1, it = "jpeg")
source('~/Dropbox/warbleR/R/compare.methods.R')
compare.methods(X = st2, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("XCORR", "SP"), parallel = 1, it = "jpeg")
compare.methods(X = st2, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("XCORR", "SP"), parallel = 1, it = "jpeg")
compare.methods(X = selec.table, flim = c(0, 10), sp = sp, bp = c(0, 10), mar = 0.1, wl = 300,
ovlp = 90, res = 200, n = 10, length.out = 30,
methods = c("dfDTW", "SP"), parallel = 1, it = "jpeg")
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
compare.methods(X = selec.table, flim = c(0, 10), sp = sp, bp = c(0, 10), wl = 300, n = 10, methods = c("dfDTW", "SP"))
setwd(tempdir())
compare.methods(X = selec.table, flim = c(0, 10), sp = sp, bp = c(0, 10), wl = 300, n = 10, methods = c("dfDTW", "SP"))
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
KnitPost(site.path = "~/Dropbox/Websites/Blog/maRce10.github.com/", rmd.file =  "~/Dropbox/Websites/Blog/maRce10.github.com/_Rmd/Choosing the right method for measuring acoustic signal structure.Rmd", categories = "spectrograms", rm.output.text = F)
